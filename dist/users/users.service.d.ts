import { Cat } from 'src/cats/entity/cats.entity';
import { Repository } from 'typeorm';
import { User } from './entity/users.entity';
import { CreateUserDto } from './dtos/create-user.dto';
export declare class UsersService {
    private readonly catRepository;
    private readonly userRepository;
    constructor(catRepository: Repository<Cat>, userRepository: Repository<User>);
    getAll(): Promise<User[]>;
    findOne(id: string): Promise<User>;
    createConCat(createUserDto: CreateUserDto): Promise<{
        length: number;
        toString(): string;
        toLocaleString(): string;
        pop(): import("../cats/dtos/create-cat.dto").CreateCatDto;
        push(...items: import("../cats/dtos/create-cat.dto").CreateCatDto[]): number;
        concat(...items: ConcatArray<import("../cats/dtos/create-cat.dto").CreateCatDto>[]): import("../cats/dtos/create-cat.dto").CreateCatDto[];
        concat(...items: (import("../cats/dtos/create-cat.dto").CreateCatDto | ConcatArray<import("../cats/dtos/create-cat.dto").CreateCatDto>)[]): import("../cats/dtos/create-cat.dto").CreateCatDto[];
        join(separator?: string): string;
        reverse(): import("../cats/dtos/create-cat.dto").CreateCatDto[];
        shift(): import("../cats/dtos/create-cat.dto").CreateCatDto;
        slice(start?: number, end?: number): import("../cats/dtos/create-cat.dto").CreateCatDto[];
        sort(compareFn?: (a: import("../cats/dtos/create-cat.dto").CreateCatDto, b: import("../cats/dtos/create-cat.dto").CreateCatDto) => number): import("../cats/dtos/create-cat.dto").CreateCatDto[];
        splice(start: number, deleteCount?: number): import("../cats/dtos/create-cat.dto").CreateCatDto[];
        splice(start: number, deleteCount: number, ...items: import("../cats/dtos/create-cat.dto").CreateCatDto[]): import("../cats/dtos/create-cat.dto").CreateCatDto[];
        unshift(...items: import("../cats/dtos/create-cat.dto").CreateCatDto[]): number;
        indexOf(searchElement: import("../cats/dtos/create-cat.dto").CreateCatDto, fromIndex?: number): number;
        lastIndexOf(searchElement: import("../cats/dtos/create-cat.dto").CreateCatDto, fromIndex?: number): number;
        every<S extends import("../cats/dtos/create-cat.dto").CreateCatDto>(predicate: (value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => U, thisArg?: any): U[];
        filter<S_1 extends import("../cats/dtos/create-cat.dto").CreateCatDto>(predicate: (value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => unknown, thisArg?: any): import("../cats/dtos/create-cat.dto").CreateCatDto[];
        reduce(callbackfn: (previousValue: import("../cats/dtos/create-cat.dto").CreateCatDto, currentValue: import("../cats/dtos/create-cat.dto").CreateCatDto, currentIndex: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => import("../cats/dtos/create-cat.dto").CreateCatDto): import("../cats/dtos/create-cat.dto").CreateCatDto;
        reduce(callbackfn: (previousValue: import("../cats/dtos/create-cat.dto").CreateCatDto, currentValue: import("../cats/dtos/create-cat.dto").CreateCatDto, currentIndex: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => import("../cats/dtos/create-cat.dto").CreateCatDto, initialValue: import("../cats/dtos/create-cat.dto").CreateCatDto): import("../cats/dtos/create-cat.dto").CreateCatDto;
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: import("../cats/dtos/create-cat.dto").CreateCatDto, currentIndex: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: import("../cats/dtos/create-cat.dto").CreateCatDto, currentValue: import("../cats/dtos/create-cat.dto").CreateCatDto, currentIndex: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => import("../cats/dtos/create-cat.dto").CreateCatDto): import("../cats/dtos/create-cat.dto").CreateCatDto;
        reduceRight(callbackfn: (previousValue: import("../cats/dtos/create-cat.dto").CreateCatDto, currentValue: import("../cats/dtos/create-cat.dto").CreateCatDto, currentIndex: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => import("../cats/dtos/create-cat.dto").CreateCatDto, initialValue: import("../cats/dtos/create-cat.dto").CreateCatDto): import("../cats/dtos/create-cat.dto").CreateCatDto;
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: import("../cats/dtos/create-cat.dto").CreateCatDto, currentIndex: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends import("../cats/dtos/create-cat.dto").CreateCatDto>(predicate: (this: void, value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, obj: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, obj: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => unknown, thisArg?: any): import("../cats/dtos/create-cat.dto").CreateCatDto;
        findIndex(predicate: (value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, obj: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => unknown, thisArg?: any): number;
        fill(value: import("../cats/dtos/create-cat.dto").CreateCatDto, start?: number, end?: number): import("../cats/dtos/create-cat.dto").CreateCatDto[];
        copyWithin(target: number, start: number, end?: number): import("../cats/dtos/create-cat.dto").CreateCatDto[];
        entries(): IterableIterator<[number, import("../cats/dtos/create-cat.dto").CreateCatDto]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<import("../cats/dtos/create-cat.dto").CreateCatDto>;
        includes(searchElement: import("../cats/dtos/create-cat.dto").CreateCatDto, fromIndex?: number): boolean;
        flatMap<U_3, This = undefined>(callback: (this: This, value: import("../cats/dtos/create-cat.dto").CreateCatDto, index: number, array: import("../cats/dtos/create-cat.dto").CreateCatDto[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
        flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
        [Symbol.iterator](): IterableIterator<import("../cats/dtos/create-cat.dto").CreateCatDto>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
        at(index: number): import("../cats/dtos/create-cat.dto").CreateCatDto;
        id: string;
        fullName: string;
        age: number;
        email: string;
        country: string;
        cats: import("../cats/dtos/create-cat.dto").CreateCatDto[];
    }>;
    create(createUserDto: CreateUserDto): Promise<User>;
}
